/**
 * MSB Pay API
 * API specification for payment processing via the MySchoolBucks.com cart checkout. <br /> <a href=\"MSBPayAPI-v2-changelog.txt\">Changelog</a>
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CartStatus from '../model/CartStatus';
import InlineResponse2001 from '../model/InlineResponse2001';
import InlineResponse2002 from '../model/InlineResponse2002';
import InlineResponse2003 from '../model/InlineResponse2003';
import InlineResponse2004 from '../model/InlineResponse2004';
import InlineResponse201 from '../model/InlineResponse201';

/**
* Cart service.
* @module api/CartApi
* @version v2
*/
export default class CartApi {

    /**
    * Constructs a new CartApi. 
    * @alias module:api/CartApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the cartsCartIdAddItemsPost operation.
     * @callback module:api/CartApi~cartsCartIdAddItemsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create cart item
     * Add a new cart item to the request. This appends to the request, you will need to send an update to the cart to change or remove the current contents.
     * @param {Object} opts Optional parameters
     * @param {module:api/CartApi~cartsCartIdAddItemsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    cartsCartIdAddItemsPost(authorization, cartId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        'cartId': cartId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/carts/{cartId}/addItems', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the cartsCartIdDelete operation.
     * @callback module:api/CartApi~cartsCartIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete cart
     * Cancels cart with supplied ID. Returns true if the cart was canceled, false otherwise.
     * @param {module:api/CartApi~cartsCartIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    cartsCartIdDelete(authorization, cartId, callback) {
      let postBody = null;

      let pathParams = {
        'cartId': cartId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/carts/{cartId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the cartsCartIdGet operation.
     * @callback module:api/CartApi~cartsCartIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get cart by ID
     * Returns a cart created via this developer key.
     * @param {module:api/CartApi~cartsCartIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    cartsCartIdGet(authorization, cartId, callback) {
      let postBody = null;

      let pathParams = {
        'cartId': cartId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/carts/{cartId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the cartsCartIdProcessPost operation.
     * @callback module:api/CartApi~cartsCartIdProcessPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Process cart
     * Process authorized cart created via this developer key and previously approved by customer. Process method only works on carts in Approved status.
     * @param {module:api/CartApi~cartsCartIdProcessPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2004}
     */
    cartsCartIdProcessPost(authorization, cartId, callback) {
      let postBody = null;

      let pathParams = {
        'cartId': cartId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/carts/{cartId}/process', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the cartsCartIdPut operation.
     * @callback module:api/CartApi~cartsCartIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update cart
     * Replace the cart request with the supplied details. This does not patch the request, you will need to send the entire snapshot of the cart to update.
     * @param {Object} opts Optional parameters
     * @param {module:api/CartApi~cartsCartIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    cartsCartIdPut(authorization, cartId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        'cartId': cartId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/carts/{cartId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the cartsGet operation.
     * @callback module:api/CartApi~cartsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read carts for developer key
     * Returns list of carts created via this developer key.
     * @param {Object} opts Optional parameters
     * @param {module:api/CartApi~cartsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    cartsGet(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'status': opts['status'],
        'createdDateStart': opts['createdDateStart'],
        'createdDateEnd': opts['createdDateEnd'],
        'updatedDateStart': opts['updatedDateStart'],
        'updatedDateEnd': opts['updatedDateEnd'],
        'clientId': opts['clientId'],
        'storeId': opts['storeId'],
        'paymentMethodId': opts['paymentMethodId'],
        'departmentId': opts['departmentId'],
        'itemId': opts['itemId'],
        'itemName': opts['itemName'],
        'studentName': opts['studentName'],
        'reference': opts['reference'],
        'page': opts['page'],
        'rowCount': opts['rowCount']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/carts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the cartsPost operation.
     * @callback module:api/CartApi~cartsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create cart
     * Prepares a cart to be processed in MySchoolBucks. Returns a new cart ID for the requested items.
     * @param {Object} opts Optional parameters
     * @param {module:api/CartApi~cartsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    cartsPost(authorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/carts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
