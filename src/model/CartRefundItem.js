/**
 * MSB Pay API
 * API specification for payment processing via the MySchoolBucks.com cart checkout. <br /> <a href=\"MSBPayAPI-v2-changelog.txt\">Changelog</a>
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ItemProperty from './ItemProperty';

/**
* The CartRefundItem model module.
* @module model/CartRefundItem
* @version v2
*/
export default class CartRefundItem {
    /**
    * Constructs a new <code>CartRefundItem</code>.
    * @alias module:model/CartRefundItem
    * @class
    * @param itemId {String} ID for the MySchoolBucks item that the refund should be recorded with for reporting
    * @param itemName {String} Name of item that the line items should display to user at checkout and any receipts
    * @param quantity {String} Number of the items to refund
    * @param unitPrice {String} Dollar amount price for each unit refunded
    */

    constructor(itemId, itemName, quantity, unitPrice) {
        
        
        this['itemId'] = itemId;
        this['itemName'] = itemName;
        this['quantity'] = quantity;
        this['unitPrice'] = unitPrice;
        
    }

    /**
    * Constructs a <code>CartRefundItem</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/CartRefundItem} obj Optional instance to populate.
    * @return {module:model/CartRefundItem} The populated <code>CartRefundItem</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CartRefundItem();
                        
            
            if (data.hasOwnProperty('departmentId')) {
                obj['departmentId'] = ApiClient.convertToType(data['departmentId'], 'String');
            }
            if (data.hasOwnProperty('itemId')) {
                obj['itemId'] = ApiClient.convertToType(data['itemId'], 'String');
            }
            if (data.hasOwnProperty('itemName')) {
                obj['itemName'] = ApiClient.convertToType(data['itemName'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'String');
            }
            if (data.hasOwnProperty('unitPrice')) {
                obj['unitPrice'] = ApiClient.convertToType(data['unitPrice'], 'String');
            }
            if (data.hasOwnProperty('salesTax')) {
                obj['salesTax'] = ApiClient.convertToType(data['salesTax'], 'String');
            }
            if (data.hasOwnProperty('studentName')) {
                obj['studentName'] = ApiClient.convertToType(data['studentName'], 'String');
            }
            if (data.hasOwnProperty('glAccountId')) {
                obj['glAccountId'] = ApiClient.convertToType(data['glAccountId'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], [ItemProperty]);
            }
        }
        return obj;
    }

    /**
    * ID for MySchoolBucks department that the refund should be recorded with for reporting
    * @member {String} departmentId
    */
    'departmentId' = undefined;
    /**
    * ID for the MySchoolBucks item that the refund should be recorded with for reporting
    * @member {String} itemId
    */
    'itemId' = undefined;
    /**
    * Name of item that the line items should display to user at checkout and any receipts
    * @member {String} itemName
    */
    'itemName' = undefined;
    /**
    * Number of the items to refund
    * @member {String} quantity
    */
    'quantity' = undefined;
    /**
    * Dollar amount price for each unit refunded
    * @member {String} unitPrice
    */
    'unitPrice' = undefined;
    /**
    * Dollar amount total sales tax for this cart item
    * @member {String} salesTax
    */
    'salesTax' = undefined;
    /**
    * Student name to be included in the reporting
    * @member {String} studentName
    */
    'studentName' = undefined;
    /**
    * GL Account to which the refund for this item will be applied
    * @member {String} glAccountId
    */
    'glAccountId' = undefined;
    /**
    * Recorded for reporting
    * @member {String} reference
    */
    'reference' = undefined;
    /**
    * Array of additional properties to be recorded with the order and payment line items
    * @member {Array.<module:model/ItemProperty>} properties
    */
    'properties' = undefined;




}
