/**
 * MSB Pay API
 * API specification for payment processing via the MySchoolBucks.com cart checkout. <br /> <a href=\"MSBPayAPI-v2-changelog.txt\">Changelog</a>
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CartItem from './CartItem';
import CartStatus from './CartStatus';
import WebhookSubscription from './WebhookSubscription';

/**
* The Cart model module.
* @module model/Cart
* @version v2
*/
export default class Cart {
    /**
    * Constructs a new <code>Cart</code>.
    * MSB Pay cart model
    * @alias module:model/Cart
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>Cart</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/Cart} obj Optional instance to populate.
    * @return {module:model/Cart} The populated <code>Cart</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Cart();
                        
            
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = CartStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Date');
            }
            if (data.hasOwnProperty('redirectUrl')) {
                obj['redirectUrl'] = ApiClient.convertToType(data['redirectUrl'], 'String');
            }
            if (data.hasOwnProperty('returnToSiteUrl')) {
                obj['returnToSiteUrl'] = ApiClient.convertToType(data['returnToSiteUrl'], 'String');
            }
            if (data.hasOwnProperty('checkoutUrl')) {
                obj['checkoutUrl'] = ApiClient.convertToType(data['checkoutUrl'], 'String');
            }
            if (data.hasOwnProperty('allowDuplicatePayments')) {
                obj['allowDuplicatePayments'] = ApiClient.convertToType(data['allowDuplicatePayments'], 'String');
            }
            if (data.hasOwnProperty('loginPolicy')) {
                obj['loginPolicy'] = ApiClient.convertToType(data['loginPolicy'], 'String');
            }
            if (data.hasOwnProperty('checkoutStyle')) {
                obj['checkoutStyle'] = ApiClient.convertToType(data['checkoutStyle'], 'String');
            }
            if (data.hasOwnProperty('cartItems')) {
                obj['cartItems'] = ApiClient.convertToType(data['cartItems'], [CartItem]);
            }
            if (data.hasOwnProperty('paymentPreauthPolicy')) {
                obj['paymentPreauthPolicy'] = ApiClient.convertToType(data['paymentPreauthPolicy'], 'String');
            }
            if (data.hasOwnProperty('webhookSubscriptions')) {
                obj['webhookSubscriptions'] = ApiClient.convertToType(data['webhookSubscriptions'], [WebhookSubscription]);
            }
        }
        return obj;
    }

    /**
    * Identifier of the cart created by the request
    * @member {String} id
    */
    'id' = undefined;
    /**
    * @member {module:model/CartStatus} status
    */
    'status' = undefined;
    /**
    * Date the cart was created and ID returned
    * @member {Date} createdDate
    */
    'createdDate' = undefined;
    /**
    * Date the cart was last updated
    * @member {Date} lastUpdated
    */
    'lastUpdated' = undefined;
    /**
    * Url to navigate to after checkout is complete
    * @member {String} redirectUrl
    */
    'redirectUrl' = undefined;
    /**
    * Url that will be used at checkout to provide a back button to users
    * @member {String} returnToSiteUrl
    */
    'returnToSiteUrl' = undefined;
    /**
    * Send the customer here to complete checkout
    * @member {String} checkoutUrl
    */
    'checkoutUrl' = undefined;
    /**
    * Will be \"true\" if set, \"false\" otherwise
    * @member {String} allowDuplicatePayments
    */
    'allowDuplicatePayments' = undefined;
    /**
    * Login policy for the cart. Either \"optional\" or null
    * @member {String} loginPolicy
    */
    'loginPolicy' = undefined;
    /**
    * Checkout style to use. Either \"express\" or null
    * @member {String} checkoutStyle
    */
    'checkoutStyle' = undefined;
    /**
    * @member {Array.<module:model/CartItem>} cartItems
    */
    'cartItems' = undefined;
    /**
    * Payment preauthorization policy for the cart. Valid options are \"none\", \"fullpay\", or null
    * @member {String} paymentPreauthPolicy
    */
    'paymentPreauthPolicy' = undefined;
    /**
    * @member {Array.<module:model/WebhookSubscription>} webhookSubscriptions
    */
    'webhookSubscriptions' = undefined;




}
