/**
 * MSB Pay API
 * API specification for payment processing via the MySchoolBucks.com cart checkout. <br /> <a href=\"MSBPayAPI-v2-changelog.txt\">Changelog</a>
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CartPaymentItem from './CartPaymentItem';
import PaymentTxnType from './PaymentTxnType';

/**
* The CartPayment model module.
* @module model/CartPayment
* @version v2
*/
export default class CartPayment {
    /**
    * Constructs a new <code>CartPayment</code>.
    * Payment for an API initiated checkout
    * @alias module:model/CartPayment
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>CartPayment</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/CartPayment} obj Optional instance to populate.
    * @return {module:model/CartPayment} The populated <code>CartPayment</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CartPayment();
                        
            
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('cartId')) {
                obj['cartId'] = ApiClient.convertToType(data['cartId'], 'String');
            }
            if (data.hasOwnProperty('orderId')) {
                obj['orderId'] = ApiClient.convertToType(data['orderId'], 'String');
            }
            if (data.hasOwnProperty('payerName')) {
                obj['payerName'] = ApiClient.convertToType(data['payerName'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('txnType')) {
                obj['txnType'] = PaymentTxnType.constructFromObject(data['txnType']);
            }
            if (data.hasOwnProperty('storeId')) {
                obj['storeId'] = ApiClient.convertToType(data['storeId'], 'String');
            }
            if (data.hasOwnProperty('paymentMethodId')) {
                obj['paymentMethodId'] = ApiClient.convertToType(data['paymentMethodId'], 'String');
            }
            if (data.hasOwnProperty('billingAcctDesc')) {
                obj['billingAcctDesc'] = ApiClient.convertToType(data['billingAcctDesc'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('salesTax')) {
                obj['salesTax'] = ApiClient.convertToType(data['salesTax'], 'Number');
            }
            if (data.hasOwnProperty('userTxnFee')) {
                obj['userTxnFee'] = ApiClient.convertToType(data['userTxnFee'], 'Number');
            }
            if (data.hasOwnProperty('clientTxnFee')) {
                obj['clientTxnFee'] = ApiClient.convertToType(data['clientTxnFee'], 'Number');
            }
            if (data.hasOwnProperty('confirmation')) {
                obj['confirmation'] = ApiClient.convertToType(data['confirmation'], 'String');
            }
            if (data.hasOwnProperty('batchDate')) {
                obj['batchDate'] = ApiClient.convertToType(data['batchDate'], 'Date');
            }
            if (data.hasOwnProperty('batchNumber')) {
                obj['batchNumber'] = ApiClient.convertToType(data['batchNumber'], 'String');
            }
            if (data.hasOwnProperty('depositAmount')) {
                obj['depositAmount'] = ApiClient.convertToType(data['depositAmount'], 'Number');
            }
            if (data.hasOwnProperty('settled')) {
                obj['settled'] = ApiClient.convertToType(data['settled'], 'Boolean');
            }
            if (data.hasOwnProperty('cartPaymentItems')) {
                obj['cartPaymentItems'] = ApiClient.convertToType(data['cartPaymentItems'], [CartPaymentItem]);
            }
            if (data.hasOwnProperty('remainingRefundableAmount')) {
                obj['remainingRefundableAmount'] = ApiClient.convertToType(data['remainingRefundableAmount'], 'Number');
            }
        }
        return obj;
    }

    /**
    * Identifier of the payment object
    * @member {String} id
    */
    'id' = undefined;
    /**
    * Identifier of the client where payment was recorded
    * @member {String} clientId
    */
    'clientId' = undefined;
    /**
    * Identifier of the cart created by the request
    * @member {String} cartId
    */
    'cartId' = undefined;
    /**
    * Identifier of the order object
    * @member {String} orderId
    */
    'orderId' = undefined;
    /**
    * Name of the account holder from stored billing account or guest checkout
    * @member {String} payerName
    */
    'payerName' = undefined;
    /**
    * Date and time of payment
    * @member {Date} date
    */
    'date' = undefined;
    /**
    * @member {module:model/PaymentTxnType} txnType
    */
    'txnType' = undefined;
    /**
    * ID for the district-level store where the sale was recorded
    * @member {String} storeId
    */
    'storeId' = undefined;
    /**
    * ID for the MySchoolBucks payment method configuration that this payment has processed through
    * @member {String} paymentMethodId
    */
    'paymentMethodId' = undefined;
    /**
    * Short string reference for the type of account and last 4 of account number submitted to pay order
    * @member {String} billingAcctDesc
    */
    'billingAcctDesc' = undefined;
    /**
    * Amount of payment
    * @member {Number} amount
    */
    'amount' = undefined;
    /**
    * Amount of sales tax for payment
    * @member {Number} salesTax
    */
    'salesTax' = undefined;
    /**
    * Amount of fees paid by user
    * @member {Number} userTxnFee
    */
    'userTxnFee' = undefined;
    /**
    * Amount of fees paid by district
    * @member {Number} clientTxnFee
    */
    'clientTxnFee' = undefined;
    /**
    * Merchant confirmation status of payment
    * @member {String} confirmation
    */
    'confirmation' = undefined;
    /**
    * TODO - is this needed Date and time of payment gateway batch settlement
    * @member {Date} batchDate
    */
    'batchDate' = undefined;
    /**
    * TODO - is this needed Payment gateway batch settlement  reference number
    * @member {String} batchNumber
    */
    'batchNumber' = undefined;
    /**
    * TODO - is this needed Amount settled to funding account with this batch
    * @member {Number} depositAmount
    */
    'depositAmount' = undefined;
    /**
    * Status of card/bank settlement - if true, the account holder has had funds applied to their account balance
    * @member {Boolean} settled
    */
    'settled' = undefined;
    /**
    * Payment items associated with this cart
    * @member {Array.<module:model/CartPaymentItem>} cartPaymentItems
    */
    'cartPaymentItems' = undefined;
    /**
    * Remaining refundable amount that can be applied to the payment.  Cart Payments that have txnType=REFUND will have a remainingRefundableAmount=NULL.  All other payments will have remainingRefundableAmount >= 0.00
    * @member {Number} remainingRefundableAmount
    */
    'remainingRefundableAmount' = undefined;




}
